"""Subclass of MainFrame, which is generated by wxFormBuilder."""

import os
import sys
from glob import glob
import wx
import SVGConvertorMainFrame

from pprint import pprint


# Implementing MainFrame
class SVGConvertor(SVGConvertorMainFrame.MainFrame):
    def __init__(self, parent):
        SVGConvertorMainFrame.MainFrame.__init__(self, parent)
        self.svg_files = []
        self.inkscape_file = ''
        self.export_options = []
        self.export_dir = ''

        self.searchInkscapeFile()

    # Handlers for MainFrame events.
    def addFiles(self, event):
        # addFiles
        with wx.FileDialog(self, "添加 SVG 文件", wildcard="SVG files (*.svg)|*.svg",
                           style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST | wx.FD_MULTIPLE) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return
            self.addToFileList(fileDialog.GetPaths())
        self.toggleExportButton()

    def addDirectory(self, event):
        # TODO: Implement addDirectory
        with wx.DirDialog(self, '添加包含 SVG 文件的目录', style=wx.DD_DIR_MUST_EXIST) as dirDialog:
            if dirDialog.ShowModal() == wx.ID_CANCEL:
                return
            self.addToFileList(glob('{0}/*.svg'.format(dirDialog.GetPath())))
        self.toggleExportButton()

    def removeFiles(self, event):
        # removeFiles
        selections = self.SVGFileList.GetSelections()
        if selections:
            selections.reverse()
            for index in selections:
                self.SVGFileList.Delete(index)
                self.svg_files.pop(index)
        self.toggleExportButton()

    def removeAll(self, event):
        # removeAll
        self.SVGFileList.Clear()
        self.ExportButton.Disable()

    def export(self, event):
        # export
        self.export_options = []
        self.setExportOptions()
        export_options = ' '.join(self.export_options)
        cmd_args = [self.inkscape_file]
        cmd_args.extend(self.export_options)
        if self.SourceDirCheck.IsChecked():
            svg_files = ['"{0}"'.format(file) for file in self.svg_files]
            cmd_args.extend(svg_files)
            cmd = ' '.join(cmd_args)
            pprint(cmd)
        else:
            cmd = ' '.join(cmd_args)
            cmd_list = []
            for file in self.svg_files:
                dir_name, file_name = os.path.split(file)
                file_name, ext = os.path.splitext(file_name)
                export_name = os.path.join(self.export_dir, file_name)
                cmd_list.append('{0} "{1}" {2}'.format(cmd, export_name, file))
            pprint(cmd_list)

    def toggleTypeVersion(self, event):
        # Implement toggleFormatVersion
        index = self.ExportType.GetSelection()
        export_type = self.ExportType.GetString(index)
        if export_type == 'PDF':
            self.PDFVersion.Enable()
            self.EPSLevel.Disable()
        elif export_type == 'EPS':
            self.PDFVersion.Disable()
            self.EPSLevel.Enable()

    def toggleExportDirPicker(self, event):
        # toggleExportDirPicker
        self.ExportDir.Enable(not self.SourceDirCheck.IsChecked())

    def setInkscapeFile( self, event ):
        self.inkscape_file = self.InkscapeFile.GetPath()
        self.toggleExportButton()

    def toggleExportButton(self):
        pprint(self.inkscape_file)
        pprint(self.svg_files)
        if self.inkscape_file and self.svg_files:
            self.ExportButton.Enable()
        else:
            self.ExportButton.Disable()

    def addToFileList(self, files):
        for file in files:
            if file not in self.svg_files:
                self.SVGFileList.Append(file)
                self.svg_files.append(file)

    def searchInkscapeFile(self):
        inkscape_cmd = r'inkscape\bin\inkscape.com'
        paths = [os.environ['ProgramFiles'], os.environ['ProgramFiles(x86)']]
        paths.extend(os.environ['PATH'].split(';'))
        for path in paths:
            inkscape_file = os.path.join(path, inkscape_cmd)
            if os.path.exists(inkscape_file):
                self.InkscapeFile.SetPath(inkscape_file)
                self.inkscape_file = '"{0}"'.format(inkscape_file)

    def setExportOptions(self):
        # Export Format
        index = self.ExportType.GetSelection()
        export_type = self.ExportType.GetString(index).lower()
        self.export_options.append('--export-type={0}'.format(export_type))

        # Export PDF version or EPS level
        if export_type == 'pdf':
            index = self.PDFVersion.GetSelection()
            pdf_version = self.PDFVersion.GetString(index).split()[-1]
            self.export_options.append('--export-pdf-version={0}'.format(pdf_version))
        elif export_type == 'eps':
            index = self.EPSLevel.GetSelection()
            ps_level = self.EPSLevel.GetString(index).split()[-1]
            self.export_options.append('--export-ps-level={0}'.format(ps_level))

        # Text export option
        index = self.TextOption.GetSelection()
        if index == 1:
            self.export_options.append('--export-text-to-path')
        elif index == 2:
            self.export_options.append('--export-latex')

        # Export DPI
        dpi = self.ExportDPI.GetValue()
        self.export_options.append('--export-dpi={0}'.format(dpi))

        # Export size
        index = self.ExportSize.GetSelection()
        if index == 0:
            self.export_options.append('--export-area-page')
        elif index == 1:
            self.export_options.append('--export-area-drawing')

        # Export path
        if not self.SourceDirCheck.IsChecked():
            self.export_options.append('--export-filename={0}')
